/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i openscad_adaptor.h -a :openscad_adaptor.cpp org.openscad.OpenSCAD.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "openscad_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class OpenSCADAdaptor
 */

OpenSCADAdaptor::OpenSCADAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

OpenSCADAdaptor::~OpenSCADAdaptor()
{
    // destructor
}

void OpenSCADAdaptor::action(const QString &name)
{
    // handle method call org.openscad.OpenSCAD.action
    QMetaObject::invokeMethod(parent(), "action", Q_ARG(QString, name));
}

void OpenSCADAdaptor::buttonPress(uint idx)
{
    // handle method call org.openscad.OpenSCAD.buttonPress
    QMetaObject::invokeMethod(parent(), "buttonPress", Q_ARG(uint, idx));
}

QStringList OpenSCADAdaptor::getActions()
{
    // handle method call org.openscad.OpenSCAD.getActions
    QStringList names;
    QMetaObject::invokeMethod(parent(), "getActions", Q_RETURN_ARG(QStringList, names));
    return names;
}

QList<double> OpenSCADAdaptor::getRotation()
{
    // handle method call org.openscad.OpenSCAD.getRotation
    QList<double> rotation;
    QMetaObject::invokeMethod(parent(), "getRotation", Q_RETURN_ARG(QList<double>, rotation));
    return rotation;
}

QList<double> OpenSCADAdaptor::getTranslation()
{
    // handle method call org.openscad.OpenSCAD.getTranslation
    QList<double> rotation;
    QMetaObject::invokeMethod(parent(), "getTranslation", Q_RETURN_ARG(QList<double>, rotation));
    return rotation;
}

void OpenSCADAdaptor::rotate(double x, double y, double z)
{
    // handle method call org.openscad.OpenSCAD.rotate
    QMetaObject::invokeMethod(parent(), "rotate", Q_ARG(double, x), Q_ARG(double, y), Q_ARG(double, z));
}

void OpenSCADAdaptor::rotateByVector(double x, double y, double z)
{
    // handle method call org.openscad.OpenSCAD.rotateByVector
    QMetaObject::invokeMethod(parent(), "rotateByVector", Q_ARG(double, x), Q_ARG(double, y), Q_ARG(double, z));
}

void OpenSCADAdaptor::rotateTo(double x, double y, double z)
{
    // handle method call org.openscad.OpenSCAD.rotateTo
    QMetaObject::invokeMethod(parent(), "rotateTo", Q_ARG(double, x), Q_ARG(double, y), Q_ARG(double, z));
}

void OpenSCADAdaptor::translate(double x, double y, double z)
{
    // handle method call org.openscad.OpenSCAD.translate
    QMetaObject::invokeMethod(parent(), "translate", Q_ARG(double, x), Q_ARG(double, y), Q_ARG(double, z));
}

void OpenSCADAdaptor::translateTo(double x, double y, double z)
{
    // handle method call org.openscad.OpenSCAD.translateTo
    QMetaObject::invokeMethod(parent(), "translateTo", Q_ARG(double, x), Q_ARG(double, y), Q_ARG(double, z));
}

void OpenSCADAdaptor::zoom(double zoom)
{
    // handle method call org.openscad.OpenSCAD.zoom
    QMetaObject::invokeMethod(parent(), "zoom", Q_ARG(double, zoom));
}

void OpenSCADAdaptor::zoomTo(double zoom)
{
    // handle method call org.openscad.OpenSCAD.zoomTo
    QMetaObject::invokeMethod(parent(), "zoomTo", Q_ARG(double, zoom));
}

