/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p openscad_interface /mnt/BORG_CUBE02/code/openscad/org.openscad.OpenSCAD.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OPENSCAD_INTERFACE_H
#define OPENSCAD_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.openscad.OpenSCAD
 */
class OrgOpenscadOpenSCADInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.openscad.OpenSCAD"; }

public:
    OrgOpenscadOpenSCADInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgOpenscadOpenSCADInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> action(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("action"), argumentList);
    }

    inline QDBusPendingReply<> buttonPress(uint idx)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(idx);
        return asyncCallWithArgumentList(QStringLiteral("buttonPress"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getActions()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getActions"), argumentList);
    }

    inline QDBusPendingReply<QList<double> > getRotation()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getRotation"), argumentList);
    }

    inline QDBusPendingReply<QList<double> > getTranslation()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getTranslation"), argumentList);
    }

    inline QDBusPendingReply<> rotate(double x, double y, double z)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(z);
        return asyncCallWithArgumentList(QStringLiteral("rotate"), argumentList);
    }

    inline QDBusPendingReply<> rotateByVector(double x, double y, double z)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(z);
        return asyncCallWithArgumentList(QStringLiteral("rotateByVector"), argumentList);
    }

    inline QDBusPendingReply<> rotateTo(double x, double y, double z)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(z);
        return asyncCallWithArgumentList(QStringLiteral("rotateTo"), argumentList);
    }

    inline QDBusPendingReply<> translate(double x, double y, double z)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(z);
        return asyncCallWithArgumentList(QStringLiteral("translate"), argumentList);
    }

    inline QDBusPendingReply<> translateTo(double x, double y, double z)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(z);
        return asyncCallWithArgumentList(QStringLiteral("translateTo"), argumentList);
    }

    inline QDBusPendingReply<> zoom(double zoom)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zoom);
        return asyncCallWithArgumentList(QStringLiteral("zoom"), argumentList);
    }

    inline QDBusPendingReply<> zoomTo(double zoom)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zoom);
        return asyncCallWithArgumentList(QStringLiteral("zoomTo"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace openscad {
    typedef ::OrgOpenscadOpenSCADInterface OpenSCAD;
  }
}
#endif
