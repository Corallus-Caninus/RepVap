// Generated by SolidPython 1.0.4 on 2020-12-29 06:36:49


difference() {
	rotate(a = [0, -15, 0]) {
		translate(v = [0, 0, 76.3397459622]) {
			union() {
				cylinder(center = true, h = 152.6794919243, r = 5);
				translate(v = [0, 0, 75.0000000000]) {
					intersection() {
						polyhedron(convexity = 2, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [0, 5, 2], [0, 3, 5], [3, 4, 6], [4, 7, 6], [4, 5, 7], [5, 8, 7], [3, 8, 5], [3, 6, 8], [6, 7, 9], [7, 10, 9], [7, 8, 10], [8, 11, 10], [6, 11, 8], [6, 9, 11], [9, 10, 12], [10, 13, 12], [10, 11, 13], [11, 14, 13], [9, 14, 11], [9, 12, 14], [12, 13, 15], [13, 16, 15], [13, 14, 16], [14, 17, 16], [12, 17, 14], [12, 15, 17], [15, 16, 18], [16, 19, 18], [16, 17, 19], [17, 20, 19], [15, 20, 17], [15, 18, 20], [18, 19, 21], [19, 22, 21], [19, 20, 22], [20, 23, 22], [18, 23, 20], [18, 21, 23], [21, 22, 24], [22, 25, 24], [22, 23, 25], [23, 26, 25], [21, 26, 23], [21, 24, 26], [24, 25, 27], [25, 28, 27], [25, 26, 28], [26, 29, 28], [24, 29, 26], [24, 27, 29], [27, 28, 30], [28, 31, 30], [28, 29, 31], [29, 32, 31], [27, 32, 29], [27, 30, 32], [30, 31, 33], [31, 34, 33], [31, 32, 34], [32, 35, 34], [30, 35, 32], [30, 33, 35], [33, 34, 36], [34, 37, 36], [34, 35, 37], [35, 38, 37], [33, 38, 35], [33, 36, 38], [36, 37, 39], [37, 40, 39], [37, 38, 40], [38, 41, 40], [36, 41, 38], [36, 39, 41], [39, 40, 42], [40, 43, 42], [40, 41, 43], [41, 44, 43], [39, 44, 41], [39, 42, 44], [42, 43, 45], [43, 46, 45], [43, 44, 46], [44, 47, 46], [42, 47, 44], [42, 45, 47], [45, 46, 48], [46, 49, 48], [46, 47, 49], [47, 50, 49], [45, 50, 47], [45, 48, 50], [48, 49, 51], [49, 52, 51], [49, 50, 52], [50, 53, 52], [48, 53, 50], [48, 51, 53], [51, 52, 54], [52, 55, 54], [52, 53, 55], [53, 56, 55], [51, 56, 53], [51, 54, 56], [54, 55, 57], [55, 58, 57], [55, 56, 58], [56, 59, 58], [54, 59, 56], [54, 57, 59], [57, 58, 60], [58, 61, 60], [58, 59, 61], [59, 62, 61], [57, 62, 59], [57, 60, 62], [60, 61, 63], [61, 64, 63], [61, 62, 64], [62, 65, 64], [60, 65, 62], [60, 63, 65], [63, 64, 66], [64, 67, 66], [64, 65, 67], [65, 68, 67], [63, 68, 65], [63, 66, 68], [66, 67, 69], [67, 70, 69], [67, 68, 70], [68, 71, 70], [66, 71, 68], [66, 69, 71], [69, 70, 72], [70, 73, 72], [70, 71, 73], [71, 74, 73], [69, 74, 71], [69, 72, 74], [72, 73, 75], [73, 76, 75], [73, 74, 76], [74, 77, 76], [72, 77, 74], [72, 75, 77], [75, 76, 78], [76, 79, 78], [76, 77, 79], [77, 80, 79], [75, 80, 77], [75, 78, 80], [78, 79, 81], [79, 82, 81], [79, 80, 82], [80, 83, 82], [78, 83, 80], [78, 81, 83], [81, 82, 84], [82, 85, 84], [82, 83, 85], [83, 86, 85], [81, 86, 83], [81, 84, 86], [84, 85, 87], [85, 88, 87], [85, 86, 88], [86, 89, 88], [84, 89, 86], [84, 87, 89], [87, 88, 90], [88, 91, 90], [88, 89, 91], [89, 92, 91], [87, 92, 89], [87, 90, 92], [90, 91, 93], [91, 94, 93], [91, 92, 94], [92, 95, 94], [90, 95, 92], [90, 93, 95], [93, 94, 96], [94, 97, 96], [94, 95, 97], [95, 98, 97], [93, 98, 95], [93, 96, 98], [96, 97, 99], [97, 100, 99], [97, 98, 100], [98, 101, 100], [96, 101, 98], [96, 99, 101], [99, 100, 102], [100, 103, 102], [100, 101, 103], [101, 104, 103], [99, 104, 101], [99, 102, 104], [102, 103, 105], [103, 106, 105], [103, 104, 106], [104, 107, 106], [102, 107, 104], [102, 105, 107], [105, 106, 108], [106, 109, 108], [106, 107, 109], [107, 110, 109], [105, 110, 107], [105, 108, 110], [108, 109, 111], [109, 112, 111], [109, 110, 112], [110, 113, 112], [108, 113, 110], [108, 111, 113], [111, 112, 114], [112, 115, 114], [112, 113, 115], [113, 116, 115], [111, 116, 113], [111, 114, 116], [114, 115, 117], [115, 118, 117], [115, 116, 118], [116, 119, 118], [114, 119, 116], [114, 117, 119], [117, 118, 120], [118, 121, 120], [118, 119, 121], [119, 122, 121], [117, 122, 119], [117, 120, 122], [120, 121, 123], [121, 124, 123], [121, 122, 124], [122, 125, 124], [120, 125, 122], [120, 123, 125], [123, 124, 126], [124, 127, 126], [124, 125, 127], [125, 128, 127], [123, 128, 125], [123, 126, 128], [126, 127, 129], [127, 130, 129], [127, 128, 130], [128, 131, 130], [126, 131, 128], [126, 129, 131], [129, 130, 132], [130, 133, 132], [130, 131, 133], [131, 134, 133], [129, 134, 131], [129, 132, 134], [132, 133, 135], [133, 136, 135], [133, 134, 136], [134, 137, 136], [132, 137, 134], [132, 135, 137], [135, 136, 138], [136, 139, 138], [136, 137, 139], [137, 140, 139], [135, 140, 137], [135, 138, 140], [138, 139, 141], [139, 142, 141], [139, 140, 142], [140, 143, 142], [138, 143, 140], [138, 141, 143], [141, 142, 144], [142, 145, 144], [142, 143, 145], [143, 146, 145], [141, 146, 143], [141, 144, 146], [144, 145, 147], [145, 148, 147], [145, 146, 148], [146, 149, 148], [144, 149, 146], [144, 147, 149], [147, 148, 150], [148, 151, 150], [148, 149, 151], [149, 152, 151], [147, 152, 149], [147, 150, 152], [0, 2, 1], [150, 151, 152]], points = [[0.0000000000, 0.0000000000, -5.0000000000], [5.0000000000, 0.0000000000, 0.0000000000], [0.0000000000, 0.0000000000, 5.0000000000], [0.3968458805, 0.0501332934, -4.9464101615], [5.3574193871, 0.6767994612, 0.0535898385], [0.3968458805, 0.0501332934, 5.0535898385], [0.7748665289, 0.1989519097, -4.8928203230], [5.6177823345, 1.4424013456, 0.1071796770], [0.7748665289, 0.1989519097, 5.1071796770], [1.1157317831, 0.4417494632, -4.8392304845], [5.7646142125, 2.2823722266, 0.1607695155], [1.1157317831, 0.4417494632, 5.1607695155], [1.4020906881, 0.7708058786, -4.7856406461], [5.7836240883, 3.1795742491, 0.2143593539], [1.4020906881, 0.7708058786, 5.2143593539], [1.6180339887, 1.1755705046, -4.7320508076], [5.6631189606, 4.1144967660, 0.2679491924], [1.6180339887, 1.1755705046, 5.2679491924], [1.7495247058, 1.6429130542, -4.6784609691], [5.3943678429, 5.0656485839, 0.3215390309], [1.7495247058, 1.6429130542, 5.3215390309], [1.7847871713, 2.1574370798, -4.6248711306], [4.9719071200, 6.0100032937, 0.3751288694], [1.7847871713, 2.1574370798, 5.3751288694], [1.7146457439, 2.7018493616, -4.5712812921], [4.3937797188, 6.9234889891, 0.4287187079], [1.7146457439, 2.7018493616, 5.4287187079], [1.5328054496, 3.2573773889, -4.5176914536], [3.6617019075, 7.7815126512, 0.4823085464], [1.5328054496, 3.2573773889, 5.4823085464], [1.2360679775, 3.8042260652, -4.4641016151], [2.7811529494, 8.5595086467, 0.5358983849], [1.2360679775, 3.8042260652, 5.5358983849], [0.8244777842, 4.3220639032, -4.4105117767], [1.7613843571, 9.2335001568, 0.5894882233], [0.8244777842, 4.3220639032, 5.5894882233], [0.3013944937, 4.7905282965, -4.3569219382], [0.6153470914, 9.7806619386, 0.6430780618], [0.3013944937, 4.7905282965, 5.6430780618], [-0.3139525976, 4.9901336421, -4.3033320997], [-0.6279051953, 9.9802672843, 0.6966679003], [-0.3139525976, 4.9901336421, 5.6966679003], [-0.9369065729, 4.9114362536, -4.2497422612], [-1.8738131459, 9.8228725073, 0.7502577388], [-0.9369065729, 4.9114362536, 5.7502577388], [-1.5450849719, 4.7552825815, -4.1961524227], [-3.0901699437, 9.5105651630, 0.8038475773], [-1.5450849719, 4.7552825815, 5.8038475773], [-2.1288964578, 4.5241352623, -4.1425625842], [-4.2577929157, 9.0482705247, 0.8574374158], [-2.1288964578, 4.5241352623, 5.8574374158], [-2.6791339749, 4.2216396275, -4.0889727457], [-5.3582679498, 8.4432792550, 0.9110272543], [-2.6791339749, 4.2216396275, 5.9110272543], [-3.1871199487, 3.8525662139, -4.0353829072], [-6.3742398975, 7.7051324278, 0.9646170928], [-3.1871199487, 3.8525662139, 5.9646170928], [-3.6448431371, 3.4227355296, -3.9817930688], [-7.2896862742, 6.8454710593, 1.0182069312], [-3.6448431371, 3.4227355296, 6.0182069312], [-4.0450849719, 2.9389262615, -3.9282032303], [-8.0901699437, 5.8778525229, 1.0717967697], [-4.0450849719, 2.9389262615, 6.0717967697], [-4.3815334002, 2.4087683705, -3.8746133918], [-8.7630668004, 4.8175367410, 1.1253866082], [-4.3815334002, 2.4087683705, 6.1253866082], [-4.6488824294, 1.8406227634, -3.8210235533], [-9.2977648589, 3.6812455268, 1.1789764467], [-4.6488824294, 1.8406227634, 6.1789764467], [-4.8429158056, 1.2434494358, -3.7674337148], [-9.6858316113, 2.4868988716, 1.2325662852], [-4.8429158056, 1.2434494358, 6.2325662852], [-4.9605735066, 0.6266661678, -3.7138438763], [-9.9211470131, 1.2533323356, 1.2861561237], [-4.9605735066, 0.6266661678, 6.2861561237], [-5.0000000000, 0.0000000000, -3.6602540378], [-10.0000000000, 0.0000000000, 1.3397459622], [-5.0000000000, 0.0000000000, 6.3397459622], [-4.9605735066, -0.6266661678, -3.6066641994], [-9.9211470131, -1.2533323356, 1.3933358006], [-4.9605735066, -0.6266661678, 6.3933358006], [-4.8429158056, -1.2434494358, -3.5530743609], [-9.6858316113, -2.4868988716, 1.4469256391], [-4.8429158056, -1.2434494358, 6.4469256391], [-4.6488824294, -1.8406227634, -3.4994845224], [-9.2977648589, -3.6812455268, 1.5005154776], [-4.6488824294, -1.8406227634, 6.5005154776], [-4.3815334002, -2.4087683705, -3.4458946839], [-8.7630668004, -4.8175367410, 1.5541053161], [-4.3815334002, -2.4087683705, 6.5541053161], [-4.0450849719, -2.9389262615, -3.3923048454], [-8.0901699437, -5.8778525229, 1.6076951546], [-4.0450849719, -2.9389262615, 6.6076951546], [-3.6448431371, -3.4227355296, -3.3387150069], [-7.2896862742, -6.8454710593, 1.6612849931], [-3.6448431371, -3.4227355296, 6.6612849931], [-3.1871199487, -3.8525662139, -3.2851251684], [-6.3742398975, -7.7051324278, 1.7148748316], [-3.1871199487, -3.8525662139, 6.7148748316], [-2.6791339749, -4.2216396275, -3.2315353300], [-5.3582679498, -8.4432792550, 1.7684646700], [-2.6791339749, -4.2216396275, 6.7684646700], [-2.1288964578, -4.5241352623, -3.1779454915], [-4.2577929157, -9.0482705247, 1.8220545085], [-2.1288964578, -4.5241352623, 6.8220545085], [-1.5450849719, -4.7552825815, -3.1243556530], [-3.0901699437, -9.5105651630, 1.8756443470], [-1.5450849719, -4.7552825815, 6.8756443470], [-0.9369065729, -4.9114362536, -3.0707658145], [-1.8738131459, -9.8228725073, 1.9292341855], [-0.9369065729, -4.9114362536, 6.9292341855], [-0.3139525976, -4.9901336421, -3.0171759760], [-0.6279051953, -9.9802672843, 1.9828240240], [-0.3139525976, -4.9901336421, 6.9828240240], [0.3013693775, -4.7901290858, -2.9635861375], [0.6153219752, -9.7802627279, 2.0364138625], [0.3013693775, -4.7901290858, 7.0364138625], [0.8242529266, -4.3208851585, -2.9099962990], [1.7611594995, -9.2323214121, 2.0900037010], [0.8242529266, -4.3208851585, 7.0900037010], [1.2354499435, -3.8023239521, -2.8564064606], [2.7805349154, -8.5576065336, 2.1435935394], [1.2354499435, -3.8023239521, 7.1435935394], [1.5316132676, -3.2548438731, -2.8028166221], [3.6605097254, -7.7789791355, 2.1971833779], [1.5316132676, -3.2548438731, 7.1971833779], [1.7127167675, -2.6988097811, -2.7492267836], [4.3918507424, -6.9204494086, 2.2507732164], [1.7127167675, -2.6988097811, 7.2507732164], [1.7819825057, -2.1540468215, -2.6956369451], [4.9691024545, -6.0066130354, 2.3043630549], [1.7819825057, -2.1540468215, 7.3043630549], [1.7457340689, -1.6393534093, -2.6420471066], [5.3905772061, -5.0620889389, 2.3579528934], [1.7457340689, -1.6393534093, 7.3579528934], [1.6131798868, -1.1720437931, -2.5884572681], [5.6582648587, -4.1109700545, 2.4115427319], [1.6131798868, -1.1720437931, 7.4115427319], [1.3961318026, -0.7675299536, -2.5348674296], [5.7776652029, -3.1762983241, 2.4651325704], [1.3961318026, -0.7675299536, 7.4651325704], [1.1086654818, -0.4389517166, -2.4812775911], [5.7575479112, -2.2795744800, 2.5187224089], [1.1086654818, -0.4389517166, 7.5187224089], [0.7667304303, -0.1968629147, -2.4276877527], [5.6096462360, -1.4403123505, 2.5723122473], [0.7667304303, -0.1968629147, 7.5723122473], [0.3877184253, -0.0489802277, -2.3740979142], [5.3482919318, -0.6756463955, 2.6259020858], [0.3877184253, -0.0489802277, 7.6259020858], [-0.0100000000, 0.0000000000, -2.3205080757], [4.9900000000, -0.0000000000, 2.6794919243], [-0.0100000000, 0.0000000000, 7.6794919243]]);
						difference() {
							cylinder($fn = 50, h = 2.6794919243, r1 = 10.0100000000, r2 = 10.0100000000);
							cylinder($fn = 50, h = 2.6794919243, r1 = 5, r2 = 5);
						}
					}
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
# TODO: consider a brita filter as a mount since corrosion seems negligable
#       as long as chlorine bumps off and minerals/metals are filtered.
#       open loop will corrode a bit anyways but shouldnt change conductive
#       property of aluminum.
#       this isnt unreasonable given 100% infill with large wall_thickness.
#       can just insert brita filter in a 3D printed stand.
#       can use arduino for filter life measurement using the flap button
#       method of brita
# TODO: consider an RGB fade color for water height when arduino
#       circuit is developed.
from solid import *
from solid.utils import *
from solid import screw_thread
from math import sin, cos, tan
import toml
import os

# This is currently the highest priority print.


def bottle_stand(leg_height, leg_camber, wall_thickness, nozzle_diameter, nozzle_depth,
                 bottle_diameter, bottle_depth):
    '''
    PARAMETERS:
        leg_height: the height of the riser legs
        leg_camber: the tilt of the leg to lower the center of mass in degrees
        wall_thickness: the general thickness of the solution
        bottle_diameter: the diameter of the bottle body past the nozzle
        bottle_depth: the length of the bottle nozzle until the bottle body
    '''
    # create bottle holder
    orifice_solid = cylinder(r=bottle_diameter/2 + wall_thickness,
                             h=bottle_depth, center=True)
    # hole here since legs may jut
    orifice = orifice_solid - cylinder(r=bottle_diameter /
                                       2, h=bottle_depth, center=True)
    # raise orifice to leg stand height
    orifice = up(leg_height+bottle_depth/2)(orifice)

    # the cusp of the nozzle holder
    throat_solid = cylinder(r1=nozzle_diameter/2 + wall_thickness,
                            r2=bottle_diameter/2 + wall_thickness, h=nozzle_depth, center=True)
    # hole here since legs may jut
    throat = throat_solid - cylinder(r1=nozzle_diameter/2,
                                     r2=bottle_diameter/2, h=nozzle_depth, center=True)
    throat = up(leg_height-nozzle_depth/2)(throat)

    # create tripod base
    # a synthetic "floor" for ensuring legs are level through subtraction.
    base_plate = cube([2*leg_height+bottle_diameter, 2*leg_height+bottle_diameter,
                       2*wall_thickness], center=True)
    rotation_offset_x = leg_height*sin(radians(leg_camber))
    rotation_offset_y = leg_height*cos(radians(leg_camber))
    # solve the intersection of the leg with the orifice penetrating wall_thickness
    screw_insert_distance = 2*wall_thickness*tan(radians(leg_camber))
    leg = cylinder(r=wall_thickness, h=leg_height +
                   screw_insert_distance, center=True)
    # TODO: adjust screw params for precision of print, possibly extract parameter
    section = screw_thread.default_thread_section(
        tooth_height=10, tooth_depth=5)
    leg_screw = screw_thread.thread(outline_pts=section,
                                    inner_rad=wall_thickness,
                                    pitch=screw_insert_distance,
                                    length=screw_insert_distance,
                                    segments_per_rot=50,
                                    neck_in_degrees=90,
                                    neck_out_degrees=90)
    leg = leg+up(leg_height/2)(leg_screw)
    leg = rotate([0, -leg_camber, 0])(up(leg_height /
                                         2+screw_insert_distance/2)(leg))
    leg = leg - hole()(base_plate)
    legs = right(rotation_offset_x + bottle_diameter/2)(leg)
    legs += rotate(120)(legs)
    legs += rotate(240)(legs)

    stand = orifice + throat
    stand = stand - legs
    return stand, leg


def render_object(render_object, filename):
    '''
    creates a .stl and .scad solution for the given solidpython OpenSCAD object
    PARAMETERS:
        render_object: the OpenSCAD object
        filename: a string for the file to be saved
    '''
    scad_render_to_file(render_object, filename + ".scad")
    # render with OpenSCAD
    print("Openscad is now rendering the solution..")
    os.system("start ../OpenSCAD/openscad.exe -o " +
              filename + ".stl " + filename + ".scad")


if __name__ == '__main__':
    config = toml.load("configuration.toml")
    stand, leg = bottle_stand(**config)
    render_object(stand, "bottle_stand")
    render_object(leg, "x3_bottle_stand_leg")
 
 
************************************************/
